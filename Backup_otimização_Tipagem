import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import cKDTree
from Estrutura_Tipada import Estrutura
import random
from collections import defaultdict

class ChassiDE:
    def __init__(
        self,
        pop_size=50,
        ngen=200,
        F=0.8,
        CR=0.7,
        min_dist=0.15,
        max_dist=0.7,
        allowable_stress=350e6,
        min_freq=20,
        early_stop=None,
        n_nodes_min=20,
        n_nodes_max=40,

    ):
        # Parâmetros DE
        self.POP_SIZE = pop_size
        self.NGEN = ngen
        self.F = F
        self.CR = CR
        self.MIN_DIST = min_dist
        self.MAX_DIST = max_dist
        self.ALLOWABLE_STRESS = allowable_stress
        self.MIN_FREQ = min_freq
        self.N_NODES_MIN = n_nodes_min
        self.N_NODES_MAX = n_nodes_max
        # Parâmetros Ideais
        self.KT_I = 1e8
        self.KF_I = 1e8
        self.m_I  = 23
        # Limites espaciais
        self.MAX_X, self.MAX_Y, self.MAX_Z = 0.6, 2.0, 1.0
        # População inicial
        self.population = [self.criar_individuo_simetrico() for _ in range(pop_size)]

    def garantir_conectividade(self, nodes, elements):

        # Mapeia número de conexões por nó
        conexoes = defaultdict(int)
        for i, j in elements:
            conexoes[i] += 1
            conexoes[j] += 1

        # Para cada nó com menos de 2 conexões
        for i in range(len(nodes)):
            while conexoes[i] < 2:
                # Encontra vizinhos válidos (respeitando distância)
                distancias = []
                for j in range(len(nodes)):
                    if i != j and (i, j) not in elements and (j, i) not in elements:
                        d = np.linalg.norm(np.array(nodes[i]) - np.array(nodes[j]))
                        if self.MIN_DIST <= d <= self.MAX_DIST:
                            distancias.append((d, j))

                if not distancias:
                    break  # Sem vizinhos válidos

                distancias.sort()
                for _, j in distancias:
                    if conexoes[j] < 4:  # Limite máximo de conexões por nó (ajustável)
                        elements.append((i, j))
                        conexoes[i] += 1
                        conexoes[j] += 1
                        break  # Adicionou uma, volta para checar se ainda precisa de outra

        return elements

    def atribuir_tubos(self, elements):
        tipos_tubos = ['Tubo A', 'Tubo B', 'Tubo C', 'Tubo D']
        tube_elements = []
        for (i, j) in elements:
            tubo = random.choice(tipos_tubos)
            tube_elements.append((i, j, tubo))
        return tube_elements

    def get_tipo_tubo_existente(self, tubos, e):
        for (i, j, tipo) in tubos:
            if (i == e[0] and j == e[1]) or (i == e[1] and j == e[0]):
                return tipo  # tubo já existia, retorna seu tipo
        return random.choice(['Tubo A', 'Tubo B', 'Tubo C', 'Tubo D'])  # tubo novo, tipo aleatório

    def criar_individuo_simetrico(self):
        # Escolhe número PAR de nós dentro dos limites
        num_nodes = random.randrange(self.N_NODES_MIN, self.N_NODES_MAX + 1, 2)
        half = num_nodes // 2

        nodes = []  

        for _ in range(half):
            zona = random.choices(
                ["dianteira", "cockpit", "traseira"],
                weights=[1, 2, 1]
            )[0]

            if zona == "dianteira":
                y = round(random.uniform(0.00, 0.45), 2)
                x = round(random.uniform(0.05, 0.20), 2)
                z = round(random.uniform(0.10, 0.50), 2)
            elif zona == "cockpit":
                y = round(random.uniform(0.55, 1.45), 2)
                x = round(random.uniform(0.05, 0.30), 2)
                z = round(random.uniform(0.10, 0.95), 2)
            else:  # traseira
                y = round(random.uniform(1.55, 1.95), 2)
                x = round(random.uniform(0.05, 0.25), 2)
                z = round(random.uniform(0.10, 0.60), 2)

            nodes.append([x, y, z])
            nodes.append([-x, y, z])

        # Conexões iniciais
        elements = []
        for i in range(0, len(nodes), 2):
            elements.append((i, i + 1))

        for i in range(0, len(nodes) - 4, 2):
            elements.append((i, i + 4))
            elements.append((i + 1, i + 5))

        if half >= 4:
            for i in range(0, len(nodes) - 6, 2):
                elements.append((i, i + 6))
                elements.append((i + 1, i + 7))

        elements = self.garantir_conectividade(nodes, elements)
        elements = self.atribuir_tubos(elements)
        return [nodes, elements]
    
    def validar_coordenadas(self,coordenadas):
        for x, y, z in coordenadas:
            if np.isnan(x) or np.isnan(y) or np.isnan(z) or np.isinf(x) or np.isinf(y) or np.isinf(z):
                raise ValueError(f"Coordenadas inválidas detectadas: ({x}, {y}, {z})")

    def mutacao(self, base, a, b, best):
        base_nodes = np.array(base[0])
        a_nodes = np.array(a[0])
        b_nodes = np.array(b[0])
        best_nodes = np.array(best[0])

        # Truncar para tamanho mínimo comum
        min_len = min(len(base_nodes), len(a_nodes), len(b_nodes), len(best_nodes))
        if min_len % 2 != 0:
            min_len -= 1  # garantir número par

        mutant_nodes = (
            best_nodes[:min_len] +
            self.F * (a_nodes[:min_len] - b_nodes[:min_len])
        )

        # Adicionar/remover pares simétricos com probabilidade
        if random.random() < 0.3 and len(mutant_nodes) < self.N_NODES_MAX:
            # Adicionar par de nós aleatório
            zona = random.choice(["dianteira", "cockpit", "traseira"])
            y_range = {"dianteira": (0.0, 0.45), "cockpit": (0.55, 1.45), "traseira": (1.55, 1.95)}[zona]
            z_range = {"dianteira": (0.1, 0.5), "cockpit": (0.1, 0.95), "traseira": (0.1, 0.6)}[zona]
            x = random.uniform(0.05, 0.3)
            y = random.uniform(*y_range)
            z = random.uniform(*z_range)
            mutant_nodes = np.vstack([mutant_nodes, [x, y, z], [-x, y, z]])

        if random.random() < 0.3 and len(mutant_nodes) > self.N_NODES_MIN:
            mutant_nodes = mutant_nodes[:-2]  # Remove último par

        # Arredondar e limitar coordenadas
        new_nodes = []
        for i in range(0, len(mutant_nodes), 2):
            x, y, z = mutant_nodes[i]
            x = np.clip(round(x, 2), 0.05, self.MAX_X)
            y = np.clip(round(y, 2), 0.0, self.MAX_Y)
            z = np.clip(round(z, 2), 0.0, self.MAX_Z) 
            new_nodes.append([x, y, z])
            new_nodes.append([-x, y, z])

        # Criar elementos básicos novamente
        elements = []
        for i in range(0, len(new_nodes), 2):
            elements.append((i, i + 1))
        for i in range(0, len(new_nodes) - 4, 2):
            elements.append((i, i + 4))
            elements.append((i + 1, i + 5))
        if len(new_nodes) // 2 >= 4:
            for i in range(0, len(new_nodes) - 6, 2):
                elements.append((i, i + 6))
                elements.append((i + 1, i + 7))

        elements = self.garantir_conectividade(new_nodes, elements)

        # Evoluir tipagem dos tubos
        tipos_tubos = ['Tubo A', 'Tubo B', 'Tubo C', 'Tubo D']
        new_elements = []
        for e in elements:
            # Pequena chance de mudar o tipo do tubo
            if random.random() < 0.25:
                tipo = random.choice(tipos_tubos)
            else:
                tipo = self.get_tipo_tubo_existente(base[1], e)  # herda tipo se existir, senão escolhe novo
            new_elements.append((e[0], e[1], tipo))

        return [new_nodes, new_elements]

    def recombinacao(self, target, mutant):
        t_nodes = target[0]
        m_nodes = mutant[0]
        min_len = min(len(t_nodes), len(m_nodes))
        trial_nodes = []

        for i in range(min_len):
            trial_nodes.append(m_nodes[i] if random.random() < self.CR else t_nodes[i])

        if len(trial_nodes) % 2 != 0:
            trial_nodes = trial_nodes[:-1]

        # Cruzamento de tubos
        t_tubos = target[1]
        m_tubos = mutant[1]
        trial_tubos = []

        min_tubos = min(len(t_tubos), len(m_tubos))
        for i in range(min_tubos):
            trial_tubos.append(m_tubos[i] if random.random() < self.CR else t_tubos[i])

        return [trial_nodes, trial_tubos]
    
    def penalizar_triangular(self, elements):
        neigh = defaultdict(set)
        for i, j,_ in elements:
            neigh[i].add(j)
            neigh[j].add(i)
        pen = 0
        for i, j,_ in elements:
            if len(neigh[i].intersection(neigh[j])) == 0:
                pen += 1e3  # penalidade por aresta sem triângulo
        return pen
    
    def verificar_requisitos_fsae(self, nodes, elements):
        pen = 0
        coords = np.array(nodes)
        
        # T6.3.1 - Main Hoop (Estrutura Principal de Roll)
        main_hoop_mask = (coords[:,1] > 1.4) & (coords[:,2] >= 0.95)  # Y > 1.4m, Z >= 950mm
        main_hoop_nodes = coords[main_hoop_mask]
        
        # Verifica dimensões mínimas (T6.3.2)
        if len(main_hoop_nodes) >= 4:  # Pelo menos 2 nós de cada lado
            y_values = main_hoop_nodes[:,1]
            z_values = main_hoop_nodes[:,2]
            if (max(z_values) - min(z_values)) < 0.15:  # Altura mínima 150mm
                pen += 5e5
            if (max(y_values) - min(y_values)) < 0.25:  # Largura mínima 250mm
                pen += 5e5
        else:
            pen += 1e6  # Penalidade máxima se não existir

        # T6.3.3 - Front Hoop (Estrutura Frontal)
        front_hoop_mask = (coords[:,1] < 0.6) & (coords[:,2] >= 0.7)
        front_hoop_nodes = coords[front_hoop_mask]
        if len(front_hoop_nodes) < 2:
            pen += 1e6

        # T6.6.1 - Side Impact Structure (20mm-400mm de altura)
        side_impact_mask = (coords[:,1] > 0.6) & (coords[:,1] < 1.4) & (coords[:,2] > 0.02) & (coords[:,2] < 0.4)
        side_nodes = coords[side_impact_mask]
        if len(side_nodes) < 4:  # Mínimo 2 nós de cada lado
            pen += 7e5

        # T3.13.4 - Front Bulkhead (Proteção frontal)
        bulkhead_mask = (coords[:,1] < 0.25) & (coords[:,2] < 0.3)
        bulkhead_nodes = coords[bulkhead_mask]
        if len(bulkhead_nodes) < 2:
            pen += 3e5

        # T6.4.2 - Roll Hoop Bracing (Diagonal de reforço)
        has_diagonal = False
        for (i,j,_) in elements:
            n1, n2 = coords[i], coords[j]
            delta_y = abs(n1[1] - n2[1])
            delta_z = abs(n1[2] - n2[2])
            if delta_y > 0.3 and delta_z > 0.3:  # Diagonal significativa
                has_diagonal = True
        if not has_diagonal:
            pen += 4e5

        return pen
        
    def verificar_main_hoop(self, nodes, elements):
        # Coleta nós na região onde deve estar o Main Hoop
        candidatos = [i for i, n in enumerate(nodes) if n[1] > 1.4 and n[2] > 0.9]

        if not candidatos:
            return 1e6  # Nenhum nó candidato — penalidade severa

        # Filtra conexões entre esses nós
        sub_elements = [(i, j,_) for i, j,_ in elements if i in candidatos and j in candidatos]

        if not sub_elements:
            return 1e6  # Nós sem conexões entre si

        # Agrupamento de componentes conectados
        grupos = []
        visitados = set()

        def dfs(i, grupo):
            visitados.add(i)
            grupo.append(i)
            for a, b,_ in sub_elements:
                viz = b if a == i else a if b == i else None
                if viz is not None and viz not in visitados:
                    dfs(viz, grupo)

        for i in candidatos:
            if i not in visitados:
                grupo = []
                dfs(i, grupo)
                grupos.append(grupo)

        if len(grupos) != 1:
            return 1e6  # Deve haver exatamente 1 Main Hoop conectado

        return 0  # Tudo certo
  
    def avaliar(self, individuo):
        pen = 0
        nodes, elements = individuo

        # Verifica se há nós e elementos
        if not nodes or not elements:
            return 1e9, None, None, None

        # Validação das coordenadas
        try:
            self.validar_coordenadas(nodes)
        except ValueError:
            return 2e9, None, None, None

        # Remove elementos inválidos: fora do range, loops, duplicados
        num_nodes = len(nodes)
        elements = [
            (i, j,_) for i, j,_ in elements
            if 0 <= i < num_nodes and 0 <= j < num_nodes and i != j
        ]
        #elements = list(set(tuple(sorted(e)) for e in elements))

        # Se não há elementos válidos, retorna penalidade máxima
        if len(elements) == 0:
            return 3e9, None, None, None

        # --- Validação da distribuição por zonas FSAE ---
        y_coords = [n[1] for n in nodes]
        zona_d = sum(1 for y in y_coords if y < 0.5)
        zona_c = sum(1 for y in y_coords if 0.5 <= y < 1.5)
        zona_t = sum(1 for y in y_coords if y >= 1.5)
        total = len(nodes)

        if zona_d == 0 or zona_c == 0 or zona_t == 0:
            pen += 1e6  # Falha grave: zona essencial vazia

        for zona_nome, count in zip(['dianteira', 'cockpit', 'traseira'], [zona_d, zona_c, zona_t]):
            if count / total < 0.2:
                pen += 1e5  # Penalidade por má distribuição

        # Penalidade por elementos degenerados (comprimento quase zero)
        for i, j,_ in elements:
            ni, nj = nodes[i], nodes[j]
            d = np.linalg.norm(np.array(ni) - np.array(nj))
            if d < 1e-6:
                return 4e9, None, None, None

        # Penalidade por violar requisitos FSAE (geometria estrutural)
        pen += self.verificar_requisitos_fsae(nodes, elements)
        pen += self.verificar_main_hoop(nodes, elements)

        # Monta a estrutura
        estrutura = Estrutura(elements, nodes)
        try:
            estrutura.matrizes_global()
        except Exception:
            return 5e9, None, None,None

        try:
            fixed_dofs = [0 * 6 + i for i in range(6)]
            F_global = np.zeros(estrutura.num_dofs)
            F_global[0 * 4 + 0] = 300
            F_global[0 * 5 + 2] = 300

            deslocamentos = estrutura.static_analysis(F_global, fixed_dofs)
            stresses = estrutura.compute_stress(
                estrutura.compute_strain(deslocamentos),
                210e9, 0.27
            )
            von_mises = estrutura.compute_von_mises(stresses)
            massa = estrutura.mass()

            _, _, _, _, _, KT, KF, _, _ = estrutura.shape_fun()
        except Exception:
            return 6e9, None, None, None

        # Penalidade de rigidez, tensões e massa
        pen += penalidade_chassi(KT, KF, massa, von_mises)

        # Penalidade de simetria
        for i in range(0, len(nodes), 2):
            n1, n2 = nodes[i], nodes[i + 1]
            if not (
                np.isclose(n1[0], -n2[0], atol=0.05)
                and np.isclose(n1[1:], n2[1:], atol=0.05).all()
            ):
                pen += 1e4

        # Penalidade por comprimento longitudinal inválido
        span = max(y_coords) - min(y_coords)
        if span < 1.6 or span > 2.0:
            pen += 1e6

        # Penalidade de conectividade e comprimento dos elementos
        conex = [0] * len(nodes)
        for i, j in elements:
            ni, nj = nodes[i], nodes[j]
            d = np.linalg.norm(np.array(ni) - np.array(nj))
            if d < self.MIN_DIST or d > self.MAX_DIST:
                pen += 1e4
            conex[i] += 1
            conex[j] += 1
        pen += sum(1e4 for c in conex if c < 3)

        # Penalidade de triangulação ruim
        pen += self.penalizar_triangular(elements)

        return (pen, massa, KT, KF)
  
    def evoluir(self):
        """
        Evolução diferencial com elitismo: preserva o melhor indivíduo.
        """
        for gen in range(self.NGEN):
            print(f"Geração {gen+1}/{self.NGEN}", end="\r")
            # guarda o melhor da população
            best_parent = min(self.population, key=lambda ind: self.avaliar(ind)[0])

            nova_pop = []
            for i, target in enumerate(self.population):
                idxs = list(range(self.POP_SIZE))
                idxs.remove(i)
                a, b, c = random.sample([self.population[k] for k in idxs], 3)
                mutant = self.mutacao(target, a, b, best_parent)
                trial = self.recombinacao(target, mutant)
                f_t = self.avaliar(target)[0]
                f_r = self.avaliar(trial)[0]
                nova_pop.append(trial if f_r < f_t else target)

            # elitismo: substitui o pior por best_parent
            worst_idx = max(range(len(nova_pop)), key=lambda i: self.avaliar(nova_pop[i])[0])
            nova_pop[worst_idx] = best_parent

            self.population = nova_pop

        # retorna o melhor final
        return min(self.population, key=lambda ind: self.avaliar(ind)[0])

    def plotar(self, individuo):
        nodes, elements = individuo
        fig = plt.figure(figsize=(10, 6))
        ax = fig.add_subplot(111, projection='3d')

        # Proteção: remove elementos com índices inválidos
        num_nodes = len(nodes)
        elements = [
            (i, j,_) for i, j,_ in elements
            if 0 <= i < num_nodes and 0 <= j < num_nodes
        ]

        xs, ys, zs = zip(*nodes)
        ax.scatter(ys, xs, zs, s=50, c='black')
        for i, j,_ in elements:
            ni, nj = nodes[i], nodes[j]
            ax.plot([ni[1], nj[1]], [ni[0], nj[0]], [ni[2], nj[2]], 'b-')
        ax.set_xlabel('Y')
        ax.set_ylabel('X')
        ax.set_zlabel('Z')
        plt.title("Chassi Evoluído (DE com Elitismo)")
        plt.show()

def penalidade_chassi(KT, KF, massa, tensoes):
    KT_min = 1e7
    KF_min = 1e6
    massa_ideal = 23
    K_mola = 5e5
    lambdaP = 1  # Penalidade maior
    tensao_min= min(tensoes) 
    tensao_max= max(tensoes)
    penalidade_total = 0

    if KT < KT_min:
        penalidade_total += lambdaP * ((KT_min - KT) / KT_min) ** 2  # Penalidade quadrática
    if KF < KF_min:
        penalidade_total += lambdaP * ((KF_min - KF) / KF_min) ** 2   # Penalidade quadráticar
    if massa > massa_ideal:
        penalidade_total += lambdaP * ((massa - massa_ideal) / massa_ideal) ** 2
    if K_mola > 25*KF or K_mola > 25*KT:
        penalidade_total += 1e5  # Penalidade fixa 
    if tensao_min !=tensao_max and tensao_max>0:
        penalidade_total += ((tensao_max-tensao_min)/tensao_min)**2

    return (penalidade_total)

if __name__ == "__main__":
    chassi = ChassiDE()
    best = chassi.evoluir()
    nodes, elements = best
    fitness, m, KT, KF= chassi.avaliar(best)
    def fmt(value):
        return f"{value:.1f}" if isinstance(value, (int, float)) else "N/A"

    print(
        f"\nMelhor: massa={fmt(m)} kg, "
        f"fitness={fmt(fitness)}, "
        f"Rigidez Flexional={fmt(KF)} Nm, "
        f"Rigidez Torcional={fmt(KT)} Nm/rad, "
        f"Quantidade de nós: {len(nodes) if nodes else 'N/A'}, "
        f"Quantidade de elementos: {len(elements) if elements else 'N/A'}"
    )
# Exibindo as listas
    print("nodes = np.array([")
    for node in nodes:
        print(f"    {node},")
    print("])\n")

    print("elements = [")
    for elem in elements:
        print(f"    {elem},")
    print("]")
   

    chassi.plotar(best)
